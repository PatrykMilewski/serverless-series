service: writer

plugins:
  - serverless-pseudo-parameters
  - serverless-webpack
  - serverless-plugin-resource-tagging
  - serverless-iam-roles-per-function
  - serverless-plugin-aws-alerts

package:
  individually: true

custom:
  baseName: "sls-series-${self:service}-${opt:stage}"

  emailForAlarms: "patryk.milewski@merapar.com"

  serverless-iam-roles-per-function:
    defaultInherit: true

  alerts:
    stages:
      - patryk
      - test
      - staging
      - prod
    prefixTemplate: ${self:custom.baseName}
    definitions:
      functionErrors:
        threshold: 1
        period: 60
        treatMissingData: notBreaching
      throttling:
        description: 'Lambda throttling'
        namespace: 'AWS/Lambda'
        metric: Throttles
        threshold: 1
        statistic: Average
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: notBreaching
    alarms:
      - functionErrors
      - throttling
    topics:
      ok:
        topic: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.baseName}-alarms"
      alarm:
        topic: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.baseName}-alarms"

provider:
  name: aws
  stage: ${opt:stage}
  stackName: ${self:custom.baseName}

  runtime: nodejs12.x
  memorySize: 256
  timeout: 20

  logRetentionInDays: 30

  tracing:
    lambda: true

  deploymentBucket:
    blockPublicAccess: true

  stackTags:
    STACK: "${self:provider.stackName}"
    SERVICE: "${self:service}"
    STAGE: "${opt:stage}"

  environment:
    DEBUG: "false"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"

functions:
  writer:
    handler: src/writer.handler
    name: ${self:custom.baseName}
    description: Writes hello world and input event into console

resources:
  Description: Partners table and changes publishing components
  Resources:

    AlarmNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.baseName}-alarms
        DisplayName: Alarms topic for ${self:custom.baseName} stack
        Subscription:
          - Endpoint: ${self:custom.emailForAlarms}
            Protocol: email
